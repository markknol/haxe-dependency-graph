// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
(function () { "use strict";
var HxOverrides = function() { };
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.find = function(it,f) {
	var v = $iterator(it)();
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
var Main = function() {
	this._parser = new Parser();
	this._canvas = window.document.getElementById("canvas");
	this._canvas.width = window.innerWidth;
	this._canvas.height = window.innerHeight;
	this._context = this._canvas.getContext("2d",null);
	this.addDragDrop(window.document.getElementById("canvas"));
};
Main.main = function() {
	new Main();
};
Main.prototype = {
	clear: function() {
		this.graphData = null;
	}
	,loadFile: function(fileContent) {
		var _gthis = this;
		this.clear();
		this.graphData = this._parser.parse(fileContent,this.graphData);
		this._linksContainer = window.document.getElementById("links");
		var dropdown = window.document.getElementById("dropdown");
		this.removeChildrenOf(dropdown);
		var _g1 = 0;
		var _g = this.graphData.length;
		while(_g1 < _g) {
			var index = _g1++;
			var item = this.graphData[index];
			if(item.path.dir.indexOf("std") != -1) {
				continue;
			}
			var option = window.document.createElement("option");
			option.textContent = item.className;
			option.value = index + "";
			dropdown.appendChild(option);
		}
		dropdown.onchange = function() {
			var item1 = _gthis.graphData[Std.parseInt(dropdown.value)];
			_gthis.showDependendies(item1);
		};
		if(this.graphData.length > 0) {
			this.showDependendies(this.graphData[0]);
		}
	}
	,addDragDrop: function(element) {
		var _gthis = this;
		element.ondragover = function() {
			element.classList.add("dragover");
			return false;
		};
		element.ondragend = function() {
			element.classList.remove("dragover");
			return false;
		};
		element.ondrop = function(e) {
			element.classList.remove("dragover");
			e.preventDefault();
			var files = e.dataTransfer.files;
			var _g = 0;
			while(_g < files.length) {
				var file = files[_g];
				++_g;
				var reader = new FileReader();
				reader.onload = function(event) {
					var text = event.target.result;
					_gthis.loadFile(text);
				};
				window.console.log(file);
				reader.readAsText(file);
			}
			return false;
		};
	}
	,showDependendies: function(info) {
		var width = this._context.canvas.width;
		var height = this._context.canvas.height;
		this._context.clearRect(0,0,width,height);
		this.removeChildrenOf(this._linksContainer);
		this.createDiv(info,width / 2,height / 2,"selected");
		this._context.beginPath();
		var total = info.dependencies.length;
		var _g1 = 0;
		var _g = total;
		while(_g1 < _g) {
			var i = _g1++;
			var dep = info.dependencies[i];
			var angle1 = i / total * (Math.PI * 2);
			var x1 = width / 2 + Math.sin(angle1) * width / 3;
			var y1 = height / 2 + Math.cos(angle1) * height / 4;
			this._context.moveTo(width / 2,height / 2);
			this._context.lineTo(x1,y1);
			this.createDiv(dep,x1,y1);
		}
		this._context.strokeStyle = "1px solid #666";
		this._context.stroke();
	}
	,removeChildrenOf: function(element) {
		while(element.children.length != 0) element.children[0].remove();
	}
	,createDiv: function(dep,x,y,cssClass) {
		if(cssClass == null) {
			cssClass = "";
		}
		var _gthis = this;
		var anchor = window.document.createElement("a");
		anchor.innerText = dep.className;
		anchor.className = "dep " + cssClass;
		anchor.href = dep.pathAsString;
		anchor.onclick = function(e) {
			_gthis.showDependendies(dep);
			e.preventDefault();
		};
		anchor.style.left = "" + x + "px";
		anchor.style.top = "" + y + "px";
		this._linksContainer.appendChild(anchor);
	}
};
var Parser = function() {
};
Parser.prototype = {
	parse: function(dumpFile,infos) {
		var lineEnd = dumpFile.indexOf("\r\n") != -1 ? "\r\n" : dumpFile.indexOf("\n") != -1 ? "\n" : "\r";
		var list = dumpFile.split(lineEnd);
		list.pop();
		if(infos == null) {
			infos = [];
		}
		var isRelation = false;
		var _g = 0;
		while(_g < list.length) {
			var fileName = list[_g];
			++_g;
			isRelation = false;
			if(StringTools.endsWith(fileName,":")) {
				fileName = HxOverrides.substr(fileName,0,fileName.lastIndexOf(":"));
			} else {
				isRelation = true;
				fileName = StringTools.replace(fileName,"\t","");
			}
			var path = new haxe_io_Path(fileName);
			var pathAsString = [path.toString()];
			var existingInfo = Lambda.find(infos,(function(pathAsString1) {
				return function(i) {
					return i.pathAsString == pathAsString1[0];
				};
			})(pathAsString));
			if(existingInfo != null) {
				infos[infos.length - 1].dependencies.push(existingInfo);
				existingInfo.dependants.push(infos[infos.length - 1]);
			} else {
				var info = new DepInfo(path,infos.length);
				if(isRelation) {
					infos[infos.length - 1].dependencies.push(info);
					info.dependants.push(infos[infos.length - 1]);
				} else {
					infos.push(info);
				}
			}
		}
		return infos;
	}
};
var DepInfo = function(path,id) {
	this.dependants = [];
	this.dependencies = [];
	this.path = path;
	this.pathAsString = path.toString();
	this.id = id;
	this.className = path.file;
};
var Std = function() { };
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
Main.main();
})();
